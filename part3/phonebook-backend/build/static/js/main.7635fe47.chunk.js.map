{"version":3,"sources":["components/Filter.js","components/ContactForm.js","components/Contacts.js","services/phonebookService.js","components/Notification.js","index.js"],"names":["PhonebookFilter","searchQuery","setSearchQuery","type","value","onChange","event","target","PersonForm","addContact","setNewContact","newContact","onSubmit","name","number","PhonebookList","props","contacts","deleteContactClick","filter","person","toLowerCase","includes","map","key","id","onClick","baseUrl","getAll","axios","get","newObject","post","then","contact","put","delete","Notification","schema","message","error","color","background","fontSize","borderStyle","borderRadius","padding","marginBottom","style","App","useState","setContacts","setMessage","useEffect","phonebookService","response","data","flashMessage","resetInterval","setTimeout","Filter","ContactForm","preventDefault","window","confirm","contactWithSameName","find","catch","Contacts","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7635fe47.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst PhonebookFilter = ({ searchQuery, setSearchQuery }) => (\r\n  <>\r\n    <label>Filter: </label>\r\n    <input\r\n      type='text'\r\n      value={searchQuery}\r\n      onChange={(event) => setSearchQuery(event.target.value)}\r\n    />\r\n  </>\r\n);\r\n\r\nexport default PhonebookFilter;\r\n","import React from 'react';\r\n\r\nconst PersonForm = ({ addContact, setNewContact, newContact }) => (\r\n  <form onSubmit={addContact}>\r\n    <div>\r\n      <label>Name: </label>\r\n      <input\r\n        onChange={(event) =>\r\n          setNewContact({\r\n            ...newContact,\r\n            name: event.target.value,\r\n          })\r\n        }\r\n        value={newContact.name}\r\n      />\r\n\r\n      <br />\r\n\r\n      <label>Number: </label>\r\n      <input\r\n        onChange={(event) =>\r\n          setNewContact({\r\n            ...newContact,\r\n            number: event.target.value,\r\n          })\r\n        }\r\n        value={newContact.number}\r\n      />\r\n    </div>\r\n    <div>\r\n      <button type='submit'>Add</button>\r\n    </div>\r\n  </form>\r\n);\r\n\r\nexport default PersonForm;\r\n","import React from 'react';\r\n\r\nconst PhonebookList = (props) => {\r\n  const { contacts, searchQuery, deleteContactClick } = props;\r\n\r\n  if (!contacts) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <ul>\r\n      {contacts\r\n        .filter((person) =>\r\n          person.name.toLowerCase().includes(searchQuery.toLowerCase())\r\n        )\r\n        .map((person) => (\r\n          <li key={person.id}>\r\n            {person.name}: {person.number}{' '}\r\n            <button onClick={() => deleteContactClick(person)}>Delete</button>\r\n          </li>\r\n        ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default PhonebookList;\r\n","import axios from 'axios';\r\nconst baseUrl = '/api/phonebook';\r\n\r\nconst getAll = () => axios.get(baseUrl);\r\n\r\nconst create = (newObject) => {\r\n  const request = axios.post(baseUrl, newObject);\r\n  return request.then(() => getAll().then((contact) => contact));\r\n};\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\r\n  return request.then(() => getAll().then((contact) => contact));\r\n};\r\n\r\nconst remove = (id) => {\r\n  const request = axios.delete(`${baseUrl}/${id}`);\r\n  return request.then(() => getAll().then((contact) => contact));\r\n};\r\n\r\nexport default {\r\n  getAll,\r\n  create,\r\n  update,\r\n  remove,\r\n};\r\n","import React from 'react';\r\n\r\nconst Notification = ({ schema }) => {\r\n  if (!schema.message) {\r\n    return null;\r\n  }\r\n\r\n  const error = {\r\n    color: schema.type === 'error' ? 'red' : 'green',\r\n    background: 'lightgrey',\r\n    fontSize: '20px',\r\n    borderStyle: 'solid',\r\n    borderRadius: '5px',\r\n    padding: '10px',\r\n    marginBottom: '10px',\r\n  };\r\n\r\n  return <div style={error}>{schema.message}</div>;\r\n};\r\n\r\nexport default Notification;\r\n","import React, { useState, useEffect } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Filter from './components/Filter';\r\nimport ContactForm from './components/ContactForm';\r\nimport Contacts from './components/Contacts';\r\nimport phonebookService from './services/phonebookService';\r\nimport Notification from './components/Notification';\r\n\r\nconst App = () => {\r\n  const [contacts, setContacts] = useState([]);\r\n  const [message, setMessage] = useState({\r\n    type: null,\r\n    message: null,\r\n  });\r\n\r\n  useEffect(() => {\r\n    phonebookService.getAll().then((response) => setContacts(response.data));\r\n  }, []);\r\n\r\n  const [newContact, setNewContact] = useState({\r\n    name: '',\r\n    number: '',\r\n  });\r\n\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n\r\n  const flashMessage = (props) => {\r\n    const { type, message, resetInterval } = props;\r\n\r\n    setMessage({\r\n      type: type,\r\n      message: message,\r\n    });\r\n\r\n    setTimeout(() => {\r\n      setMessage({\r\n        type: null,\r\n        message: null,\r\n      });\r\n    }, resetInterval);\r\n  };\r\n\r\n  const addContact = (event) => {\r\n    event.preventDefault();\r\n\r\n    const names = contacts.map((contact) => contact.name.toLowerCase());\r\n    if (names.includes(newContact.name.toLowerCase())) {\r\n      const confirmUpdate = window.confirm(\r\n        `${newContact.name} is already added to the phonebook, replace the old number with the new one?`\r\n      );\r\n\r\n      if (confirmUpdate) {\r\n        const contactWithSameName = contacts.find(\r\n          (contact) =>\r\n            contact.name.toLowerCase() === newContact.name.toLowerCase()\r\n        );\r\n        phonebookService\r\n          .update(contactWithSameName.id, newContact)\r\n          .then((response) => {\r\n            setContacts(response.data);\r\n            flashMessage({\r\n              type: 'success',\r\n              message: `${newContact.name} was updated.`,\r\n              resetInterval: 5000,\r\n            });\r\n          })\r\n          .catch((error) => {\r\n            flashMessage({\r\n              type: 'error',\r\n              message: `Information of ${contactWithSameName.name} has already been removed from the server.`,\r\n              resetInterval: 5000,\r\n            });\r\n          });\r\n      }\r\n    } else {\r\n      phonebookService.create(newContact).then((response) => {\r\n        setContacts(response.data);\r\n        \r\n        flashMessage({\r\n          type: 'success',\r\n          message: `${newContact.name} was added.`,\r\n          resetInterval: 5000,\r\n        });\r\n      }).catch(error => {\r\n        flashMessage({\r\n          type: 'error',\r\n          message: error.response.data.error,\r\n          resetInterval: 5000,\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  const deleteContactClick = (contact) => {\r\n    const confirmDeletion = window.confirm(\r\n      `Are you sure you want to delete ${contact.name}?`\r\n    );\r\n\r\n    if (confirmDeletion) {\r\n      phonebookService.remove(contact.id).then((response) => {\r\n        setContacts(response.data);\r\n        setMessage({\r\n          type: 'success',\r\n          message: `${contact.name} was deleted.`,\r\n          resetInterval: 5000,\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Phonebook</h2>\r\n      <Notification schema={message} />\r\n      <Filter searchQuery={searchQuery} setSearchQuery={setSearchQuery} />\r\n\r\n      <h2>Add a new contact</h2>\r\n      <ContactForm\r\n        addContact={addContact}\r\n        setNewContact={setNewContact}\r\n        newContact={newContact}\r\n      />\r\n\r\n      <h2>Numbers</h2>\r\n      <Contacts\r\n        contacts={contacts}\r\n        searchQuery={searchQuery}\r\n        deleteContactClick={deleteContactClick}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}